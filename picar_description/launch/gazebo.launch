<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused"          default="true"/>
  <arg name="use_sim_time"    default="true"/>
  <arg name="gui"             default="true"/>
  <arg name="headless"        default="false"/>
  <arg name="debug"           default="false"/>

  <arg name="namespace"       default="/picar" />

  <arg name="world_name"      default="worlds/empty_world" />
  <arg name="model"           default="$(find picar_description)/urdf/picar.urdf.xacro"/>
  <arg name="rvizconfig"      default="$(find picar_description)/rviz/simu.rviz" />
  <arg name="topic_cmd_vel"   default="/picar/ackermann_steering_controller/cmd_vel" />

  <arg name="frame_base"      default="base_footprint"/>
  <arg name="frame_odom"      default="odom"/>
  <arg name="frame_map"       default="map" />


  <!-- GAZEBO  -->
  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug"         value="$(arg debug)" />
    <arg name="gui"           value="$(arg gui)" />
    <arg name="paused"        value="$(arg paused)"/>
    <arg name="use_sim_time"  value="$(arg use_sim_time)"/>
    <arg name="headless"      value="$(arg headless)"/>
    <arg name="world_name"    value="$(arg world_name)"/>
  </include>

  <!-- Load the robot description -->
  <param name="robot_description"  command="$(find xacro)/xacro $(arg model)" />

  <!-- push robot_description to factory and spawn robot in gazebo                     -gazebo_namespace /$(arg namespace)/gazebo -->
  <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf" 
    args="-urdf
          -param robot_description
          -model picar
          -robot_namespace $(arg namespace)
          -x 0.0 -y 0.0 -z 0.01
          -R 0.0 -P 0.0 -Y -0.1"
    respawn="false"
    output="screen" />


  <!-- ROBOT -->
  <group ns="$(arg namespace)">

    <group if="$(arg use_sim_time)">
      <param name="/use_sim_time" value="true" />
    </group>

    <!-- Load ros_controllers configuration parameters -->
    <rosparam command="load" ns="$(arg namespace)" file="$(find picar_control)/config/ackermann_steering_controller.yaml" />
    <rosparam command="load" ns="$(arg namespace)" file="$(find picar_control)/config/gains.yaml" />
    <rosparam command="load" ns="$(arg namespace)" file="$(find picar_control)/config/joint_state_publisher.yaml" />
    <rosparam command="load" ns="$(arg namespace)" file="$(find picar_control)/config/steer_bot_hardware_gazebo.yaml" />

    <!-- Spawn the controllers -->
    <node pkg="controller_manager" type="spawner" name="controller_spawner" ns="$(arg namespace)"
          args="joint_state_publisher ackermann_steering_controller"
          respawn="false" output="screen" />

    <!-- Launch  the robot state publisher -->
    <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robot_state_publisher"
          respawn="false" output="screen">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="tf_prefix" type="string" value="$(arg namespace)" />
    </node>


    <!-- TELE-OPERATE -->
    <group ns="$(arg namespace)/teleop">

      <include file="$(find picar_teleop)/launch/picar_teleop_ps3.launch">
        <arg name="cmd_vel_topic" value="$(arg topic_cmd_vel)" />
      </include>

      <!-- Launch a rqt steering GUI for publishing to /steer_bot/steer_drive_controller/cmd_vel -->
      <!--node pkg="rqt_robot_steering" type="rqt_robot_steering" name="rqt_robot_steering" >
        <param name="default_topic" value="$(arg namespace)/ackermann_steering_controller/cmd_vel"/>
      </node-->

    </group>


    <arg name="tf_map_scanmatch_transform_frame_name" default="scanmatcher_frame"/>

    <arg name="pub_map_odom_transform" default="true"/>
    <arg name="scan_subscriber_queue_size" default="10"/>
    <arg name="scan_topic" default="laser/scan"/>
    <arg name="map_size" default="2048"/>
    
    <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
      
      <!-- Frame names -->
      <param name="map_frame" value="$(arg frame_map)" />
      <param name="base_frame" value="$(arg frame_base)" />
      <param name="odom_frame" value="$(arg frame_odom)" />
      
      <!-- Tf use -->
      <param name="use_tf_scan_transformation"  value="true"/>
      <param name="use_tf_pose_start_estimate"  value="false"/>
      <param name="pub_map_scanmatch_transform" value="true" />
      <param name="pub_map_odom_transform"      value="$(arg pub_map_odom_transform)"/>
      <param name="tf_map_scanmatch_transform_frame_name" value="$(arg tf_map_scanmatch_transform_frame_name)" />
      
      <!-- Map size / start point -->
      <param name="map_resolution"              value="0.050"/>
      <param name="map_size"                    value="$(arg map_size)"/>
      <param name="map_start_x"                 value="0.5"/>
      <param name="map_start_y"                 value="0.5" />
      <param name="map_multi_res_levels"        value="2" />
      
      <!-- Map update parameters -->
      <param name="update_factor_free"          value="0.4"/>
      <param name="update_factor_occupied"      value="0.9"/>
      <param name="map_update_distance_thresh"  value="0.4"/>
      <param name="map_update_angle_thresh"     value="0.06"/>
      <param name="map_pub_period"              value="2"  />
      <param name="laser_z_min_value"           value="-1.0"/>
      <param name="laser_z_max_value"           value="1.0"/>
      <param name="laser_min_dist"              value="0.12"/>
      <param name="laser_max_dist"              value="12.0"/>
      
      <!-- Advertising config --> 
      <param name="advertise_map_service"       value="true"/>
      <param name="scan_subscriber_queue_size"  value="$(arg scan_subscriber_queue_size)"/>
      <param name="scan_topic"                  value="$(arg scan_topic)"/>
      
      <!-- Debug parameters -->
      <!--
        <param name="output_timing" value="false"/>
        <param name="pub_drawings" value="true"/>
        <param name="pub_debug_output" value="true"/>
      -->

    </node>

    <arg name="trajectory_source_frame_name" default="base_link"/>
    <arg name="trajectory_update_rate" default="4"/>
    <arg name="trajectory_publish_rate" default="0.25"/>

    <arg name="map_file_path" default="$(find picar_description)/maps"/>
    <arg name="map_file_base_name" default="hector_slam_map"/>

    <node pkg="hector_trajectory_server" type="hector_trajectory_server" name="hector_trajectory_server" output="screen">
      <param name="target_frame_name" type="string" value="$(arg frame_map)" />
      <param name="source_frame_name" type="string" value="$(arg trajectory_source_frame_name)" />

      <param name="trajectory_update_rate" type="double" value="$(arg trajectory_update_rate)" />
      <param name="trajectory_publish_rate" type="double" value="$(arg trajectory_publish_rate)" />
    </node>

    <node pkg="hector_geotiff" type="geotiff_node" name="hector_geotiff_node" output="screen" launch-prefix="nice -n 15">
      <remap from="/picar/map" to="/dynamic_map" />

      <param name="map_file_path" type="string" value="$(arg map_file_path)" />
      <param name="map_file_base_name" type="string" value="$(arg map_file_base_name)" />
      <param name="geotiff_save_period" type="double" value="0" />
      
      <param name="draw_background_checkerboard" type="bool" value="true" />
      <param name="draw_free_space_grid" type="bool" value="true" />
      <param name="plugins" type="string" value="hector_geotiff_plugins/TrajectoryMapWriter" />
    </node>

  </group>

  <!--
  <arg name="map_file" default="$(find picar_description)/map/map.yaml"/>
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />
  -->

  <!--
  <node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server" output="screen" >
    <param name="robot_name" value="$(arg namespace)" />
    <remap from="/twist_marker_server/cmd_vel" to="cmd_vel" />
  </node>
  -->

  <!-- DEBUG TOOLS -->
  <node name="rviz" pkg="rviz" type="rviz"  args="-d $(arg rvizconfig)" />
  <node name="rqt"  pkg="rqt_gui" type="rqt_gui" />

</launch>
